#!/bin/bash

# (C) Sergey Tyurin  2021-02-17 18:00:00

# Disclaimer
##################################################################################################################
# You running this script/function means you will not blame the author(s).
# if this breaks your stuff. This script/function is provided AS IS without warranty of any kind. 
# Author(s) disclaim all implied warranties including, without limitation, 
# any implied warranties of merchantability or of fitness for a particular purpose. 
# The entire risk arising out of the use or performance of the sample scripts and documentation remains with you.
# In no event shall author(s) be held liable for any damages whatsoever 
# (including, without limitation, damages for loss of business profits, business interruption, 
# loss of business information, or other pecuniary loss) arising out of the use of or inability 
# to use the script or documentation. Neither this script/function, 
# nor any part of it other than those parts that are explicitly copied from others, 
# may be republished without author(s) express written permission. 
# Author(s) retain the right to alter this disclaimer at any time.
##################################################################################################################
#
#========= Functions list ===========
# Determine_Current_Network()
# echoerr()
# hex2dec()
# dec2hex()
# TD_unix2human()
# Check_DApp_URL()
# Get_SC_current_state()
# Get_TimeDiff() 
# Get_Elector_Address()
# Get_Current_Elections_ID()
# Get_Account_Info()
# Get_Account_Custodians_Info()
# P34_ADNL_search()
# P36_ADNL_search()
# Get_DePool_elec_ID()
# Get_Engine_ADNL()
# Elector_ADNL_Search()
# Get_NetConfig_P15()
# Get_DP_Rounds()
# Get_DP_Self_Balance()
# Get_DP_Info()
# Get_DP_Parts_List()
# Get_DP_Part_Info()
# Rounds_Sorting_by_ID()
# Get_MSIG_Trans_List()
# Send_MSIG_Trans_Confirm()
# Send_File_To_BC()
# CNode_Make_Elect_Keys_and_BOC()
# =====================================================
#
# =====================================================
#
function Determine_Current_Network() {
    # get current network zerostate
    local OS_SYSTEM=`uname -s`
    if [[ "$OS_SYSTEM" == "Linux" ]];then
        local CALL_256=sha256sum
    else 
        local CALL_256=sha256
    fi
    case "${NODE_TYPE}" in
        RUST)
            # THIS is DUMMY!! Util Rust node will can get zerostate itself
            #local CURR_NET_ID=$(curl -sS -X POST -g -H "Content-Type: application/json" ${DApp_URL}/graphql -d '{"query": "query {blocks(filter: {seq_no:{eq: 1},workchain_id:{eq:-1}}) {boc}}"}' | \
            #	jq -r '.data.blocks[0].boc' | base64 --decode | $CALL_256 |awk '{print $1}' |tr "[:lower:]" "[:upper:]"|cut -c 1-16)

            # THIS is DUMMY!! Util Rust node will can get zerostate itself
            case "$NETWORK_TYPE" in
                "main.ton.dev")
                    CURR_NET_ID=$MAIN_NET_ID
                    ;;
                "net.ton.dev")
                    CURR_NET_ID=$DEV_NET_ID
                    ;;
                "fld.ton.dev")
                    CURR_NET_ID=$FLD_NET_ID
                    ;;
                "rustnet.ton.dev")
                    CURR_NET_ID=$RST_NET_ID
                    ;;
                *)
                    CURR_NET_ID="123456789ABCDEF0"
                    ;;
            esac
            ;;
        CPP)
            local CURR_NET_ID=`$CALL_LC -rc "time" -rc "quit" 2>&1 |grep 'zerostate id'|awk -F ':' '{print $3}'|cut -c 1-16`
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[1]}-${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE: $NODE_TYPE !!!"
            exit 1
            ;;            
    esac
    case "${CURR_NET_ID}" in
        $MAIN_NET_ID)
            CurrNetInfo="${BoldText}${BlueBack}You are in MAIN network${NormText}"
            ;;
        $DEV_NET_ID)
            CurrNetInfo="${BoldText}${GreeBack}You are in DEVNET network${NormText}"
            ;;
        $FLD_NET_ID)
            CurrNetInfo="${BoldText}${YellowBack}You are in FLD network${NormText}"
            ;;
        $RST_NET_ID)
            CurrNetInfo="${BoldText}${RedBack}You are in RustNet network${NormText}"
            ;;
        *)
            CurrNetInfo="${BoldText}${RedBlink}You are in UNKNOWN network${NormText} or you need to update 'env.sh'"
            ;;
    esac
    echo "${CurrNetInfo}" 
}
# =====================================================
function echoerr() { printf "\e[31;1m%s\e[0m\n" "$*" >&2; }
# =====================================================
function hex2dec() {
    local OS_SYSTEM=`uname -s`
    local ival="$(echo ${1^^}|tr -d '"')"
    if [[ -z $ival ]]; then
        printf ""
        return
    fi
    local ob=${2:-10}
    local ib=${3:-16}
    if [[ "$OS_SYSTEM" == "Linux" ]];then
        export BC_LINE_LENGTH=0
        # set obase first before ibase -- or weird things happen.
        printf "obase=%d; ibase=%d; %s\n" $ob $ib $ival | bc
    else
        dc -e "${ib}i ${ival} p" | tr -d "\\" | tr -d "\n"
    fi
}
# =====================================================
function dec2hex() {
    ival="${1^^}"
    ob=${2:-16}
    ib=${3:-10}
    OS_SYSTEM=`uname`
    if [[ "$OS_SYSTEM" == "Linux" ]];then
        export BC_LINE_LENGTH=0
        # set obase first before ibase -- or weird things happen.
        printf "obase=%d; ibase=%d; %s\n" $ob $ib $ival | bc
    else
        dc -e "64z ${ib}i ${ob}o ${ival} p" | tr -d "\\" | tr -d '\n'
    fi
}
# =====================================================
function TD_unix2human() {
    local OS_SYSTEM=`uname -s`
    local ival="$(echo ${1}|tr -d '"')"
    if [[ -z $ival ]]; then
        printf "###-Error: Zero Time"
        return
    fi
    if [[ "$OS_SYSTEM" == "Linux" ]];then
        echo "$(date  +'%F %T %Z' -d @$ival)"
    else
        echo "$(date -r $ival +'%F %T %Z')"
    fi
}
#=================================================
# Check DApp URL in tonos-cli.conf.json correspond to NetworkType
#   Output:
#      fine
#      does not match
#      unreachable
function Check_DApp_URL() {
    local result="does not match"
    local url_in_tccj="$(cat ./tonos-cli.conf.json | jq -r .url | cut -d '/' -f 3)"
    local net_in_env=${NETWORK_TYPE}
    if [[ "${NETWORK_TYPE}" == "fld.ton.dev" ]] && [[ "${url_in_tccj}" != "gql.custler.net"  ]];then
        echo "${result}"
        return
    elif [[ "${NETWORK_TYPE}" != "${url_in_tccj}" ]] && [[ "${NETWORK_TYPE}" != "fld.ton.dev" ]];then
        echo "${result}"
        return
    fi
    local Net_Zero_Block_Check=$(curl -sS -X POST -g -H "Content-Type: application/json" https://main.ton.dev/graphql \
    -d '{"query": "query {blocks(filter: {seq_no:{eq: 1},workchain_id:{eq:-1}}) {boc}}"}' 2>/dev/null \
    |jq -r '.data.blocks[]|length' 2>/dev/null)
    if [[ $Net_Zero_Block_Check -ne 1 ]];then
        echo "unreachable"
        return
    fi
    echo "fine"
}
#=================================================
# Get Smart Contract current state by dowloading it & save to file
function Get_SC_current_state() { 
    # Input: acc in form x:xxx...xxx
    # result: file named xxx...xxx.tvc
    # return: Output of lite-client executing
    local w_acc="$1" 
    [[ -z $w_acc ]] && echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): func Get_SC_current_state: empty address" && exit 1
    local s_acc=`echo "${w_acc}" | cut -d ':' -f 2`
    for (( Try=0; Try <= 5; Try++ ))
    do
        rm -f ${s_acc}.tvc
        local LC_OUTPUT=`$CALL_LC -rc "saveaccount ${s_acc}.tvc ${w_acc}" -rc "quit" 2>/dev/null`
        local result=`echo ${LC_OUTPUT} | grep "written StateInit of account"`
        [[ -n  $result ]] && break
        sleep 3
    done
    if [[ -z  $result ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot get account state $w_acc. Can't continue. Sorry."
        echoerr "${LC_OUTPUT}"
        exit 1
    fi
    echo "${LC_OUTPUT}"
}
#=================================================
# Get current Time Diff
function Get_TimeDiff() { 
    case "${NODE_TYPE}" in
        RUST)
            RC_OUTPUT=$($CALL_RC -c "getstats" 2>&1 | cat)
            NODE_DOWN=$(echo "${RC_OUTPUT}" | grep 'Connection refused' | cat)
            if [[ ! -z $NODE_DOWN ]];then
                echo "Node Down"
                return
            fi

            if [[ ! -z $(echo "${RC_OUTPUT}" | grep 'timediff') ]];then
                TIME_DIFF=$(echo "${RC_OUTPUT}" | tail -n 7 | jq .timediff)
                echo "$TIME_DIFF"
            else
                echo "No TimeDiff Info"
            fi
            ;;
        CPP)
            VEC_OUTPUT=$($CALL_VC -c "getstats" -c "quit" 2>&1 | cat)
            NODE_DOWN=$(echo "${VEC_OUTPUT}" | grep 'Connection refused' | cat)
            if [[ ! -z $NODE_DOWN ]];then
                echo "Node Down"
                return
            fi
            CURR_TD_NOW=`echo "${VEC_OUTPUT}" | grep 'unixtime' | awk '{print $2}'`
            CHAIN_TD=`echo "${VEC_OUTPUT}" | grep 'masterchainblocktime' | awk '{print $2}'`
            TIME_DIFF=$((CURR_TD_NOW - CHAIN_TD))
            if [[ -z $CHAIN_TD ]];then
                echo "No TimeDiff Info"
            else
                echo "$TIME_DIFF"
            fi
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[1]}-${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
}
#=================================================
# Get ellector address
function Get_Elector_Address() { 
    case "${NODE_TYPE}" in
        RUST)
            local elector_addr=`$CALL_TC getconfig 1 | grep -i 'Config p1' | awk '{print $3}'| tr -d '"'`
            ;;
        CPP)
            local elector_addr=`$CALL_LC -rc "getconfig 1" -rc "quit" 2>/dev/null | grep -i 'ConfigParam(1)' | awk '{print substr($4,15,64)}'`
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[1]}-${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    if [[ -z $elector_addr ]]; then
        echoerr "###-ERROR(${FUNCNAME[1]}-${FUNCNAME[0]} line $LINENO): Can not get Elector Address!!!"
        exit 1
    fi
    echo "-1:${elector_addr}"
}
#=================================================;;
# Get current elsections ID
function Get_Current_Elections_ID() {
    elector_addr="$(Get_Elector_Address)"
    local elections_id="0"
    case "${NODE_TYPE}" in
        RUST)
            case "${ELECTOR_TYPE}" in
                "fift")
                    elections_id=`$CALL_TC runget ${elector_addr} active_election_id 2>&1 | grep -i 'Result:' | awk -F'"' '{print $2}'`
                    ;;
                "solidity")
                    elections_id=$($CALL_TC run ${elector_addr} active_election_id {} --abi ${Elector_ABI} 2>&1 | grep "value0" | awk '{print $2}' | tr -d '"')
                    ;;
                *)
                    echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): unknown ELECTOR_TYPE (${ELECTOR_TYPE})"
                    exit 1
                    ;;
            esac
            ;;
        CPP)
            case "${ELECTOR_TYPE}" in
                "fift")
                    elections_id=`$CALL_LC -rc "runmethod $elector_addr active_election_id" -rc "quit" 2>/dev/null | grep "result:" | awk '{print $3}'`
                    ;;
                "solidity")
                    elections_id=$($CALL_TC run ${elector_addr} active_election_id {} --abi ${Elector_ABI} 2>&1 | grep "value0" | awk '{print $2}' | tr -d '"')
                    ;;
                *)
                    echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): unknown ELECTOR_TYPE (${ELECTOR_TYPE})"
                    exit 1
                    ;;
            esac
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac

    if [[ -z $elections_id ]]; then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Can not get Elections ID!!!"
        exit 1
    fi

    echo "${elections_id}"
}
#=================================================
# Get account INFO
# Input: AccountHEX
# Return: Active/Uninit/None nanoTokens LastOperTime
function Get_Account_Info() {
    
    local ACCOUNT=`echo "$1"| tr '[:upper:]' '[:lower:]'`
    local acc_hex=`echo ${ACCOUNT}|cut -d ':' -f 2`
    if [[ ${#acc_hex} -ne 64 ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Wrong account address!"
        echo "None 0 0" 
        return
    fi
    case "${NODE_TYPE}" in
        RUST)
            local ACCOUNT_INFO=`$CALL_TC account ${ACCOUNT}` 2>&1
            if [[ ! -z "$(echo ${ACCOUNT_INFO} | grep -i 'Account not found')" ]];then
                echo "None 0 0"
                return
            fi
            local AMOUNT_nt=`echo "$ACCOUNT_INFO" |grep -i 'balance:' |awk '{print $2}'`
            local LASTOP=`echo "$ACCOUNT_INFO" | grep -i 'last_paid:' | gawk '{print $2}'`
            local STATUS=`echo "$ACCOUNT_INFO" | grep -i 'acc_type:'|awk '{print $2}'`
            ;;
        CPP)
            local ACCOUNT_INFO=`$CALL_LC -rc "getaccount ${ACCOUNT}" -rc "quit" 2>/dev/null`
            if [[ ! -z "$(echo ${ACCOUNT_INFO} | grep -i 'account state is empty')" ]];then
                echo "None 0 0"
                return
            fi
            local AMOUNT_nt=`echo "$ACCOUNT_INFO" |grep "account balance" | tr -d "ng"|awk '{print $4}'`
            local LASTOP=`echo "$ACCOUNT_INFO" | grep "last_paid" | gawk -F ":" '{print $5}'`
            local STATUS=`echo "$ACCOUNT_INFO" | grep 'state:'|tr -d ')'|tr -d '('|cut -d ':' -f 2`
            [[ "${STATUS}" == "account_uninit" ]] && STATUS="Uninit"
            [[ "${STATUS}" == "account_active" ]] && STATUS="Active"
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    AMOUNT=`echo "scale=3; $((AMOUNT_nt)) / 1000000000" | $CALL_BC`
    echo "${STATUS} ${AMOUNT_nt} ${LASTOP}"
}
#=================================================
# Get account Custodians
# Input: AccountHEX
# Return: NumOfCustodians MinNumOfConfirmations
function Get_Account_Custodians_Info() {
    local ACCOUNT=$1
    case "${NODE_TYPE}" in
        RUST)
            local Custod_QTY=`$CALL_TC run $ACCOUNT getCustodians {} --abi ${SafeC_Wallet_ABI} | sed -e '1,/Succeeded./d'|sed 's/Result: //'|jq '.custodians|length'`
            local Confirms_QTY=`$CALL_TC run $ACCOUNT getParameters {} --abi ${SafeC_Wallet_ABI}| sed -e '1,/Succeeded./d'|sed 's/Result: //'|jq -r '.requiredTxnConfirms'`
            ;;
        CPP)
            local val_acc_addr=`echo "${ACCOUNT}" | cut -d ':' -f 2`
            local LC_OUTPUT="$(Get_SC_current_state "$ACCOUNT")"
            local result=`echo $LC_OUTPUT | grep "written StateInit of account"`
            if [[ -z  $result ]];then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot get account state. Can't continue. Sorry."
                exit 1
            fi
            local Custod_QTY=`$CALL_TL test -a ${SafeC_Wallet_ABI} -m getCustodians -p '{}' --decode-c6 ${val_acc_addr} | grep '"custodians":'| jq -r ".custodians|length"`
            local Confirms_QTY=`$CALL_TL test -a ${SafeC_Wallet_ABI} -m getParameters -p '{}' --decode-c6 ${val_acc_addr} | grep "requiredTxnConfirms" | jq -r '.requiredTxnConfirms'`
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    Custod_QTY=$((Custod_QTY))
    Confirms_QTY=$((Confirms_QTY))
    echo "${Custod_QTY} ${Confirms_QTY}"
}
#=================================================
# Search ADNL in Network config 34
# Input: ADNL_HEX
# Return: 
#   "PUBKEY WEIGHT" - if ADNL found in p34 list
#   "absent" - if not found
#   "null" - if p34 is empty
function P34_ADNL_search() {
    local Result="absent"
    local ADNL=`echo "$1"| tr '[:upper:]' '[:lower:]'`
    if [[ ${#ADNL} -ne 64 ]];then
        echo "${Result}"
        return
    fi
    case "${NODE_TYPE}" in
        RUST)
            local P34_List="$($CALL_TC getconfig 34)"
            if [[ -n $(echo "$P34_List" | grep "Config p34:" | grep "null") ]];then
                echo "null"
                return
            fi
            P34_list="$($CALL_TC getconfig 34 | sed -e '1,4d' |sed 's/Config p34: //')"
            local found=`echo "${P34_list}" | jq ".list[]|select(.adnl_addr == \"$ADNL\")"`
            if [[ -n $found ]]; then
                local adnl="$(echo ${found} | jq -r .adnl_addr)"
                local pkey="$(echo ${found} | jq -r .public_key)"
                local wght="$(echo ${found} | jq -r .weight)"
                Result="${pkey} ${wght}"
            fi
            ;;
        CPP)
            local P34_list="$($CALL_LC -rc "getconfig 34" -rc "quit" 2>/dev/null)"
            if [[ ! -z $(echo "$P34_list" | grep "ConfigParam(34)" | grep "null") ]];then
                echo "null"
                return
            fi
            P34_list="$($CALL_LC -rc "getconfig 34" -rc "quit" 2>/dev/null | grep -i 'public_key:'| sed -e 's/^[[:space:]]*//'|tr -d ')')"
            local found=`echo "${P34_list}" | grep -i "${ADNL}"`
            if [[ -n $found ]]; then
                local adnl="$(echo ${found} | awk '{print $4}' | awk -F':' '{print $2}' | tr -d 'x' | tr '[:upper:]' '[:lower:]')"
                local pkey="$(echo ${found} | awk '{print $2}' | awk -F':' '{print $2}' | tr -d 'x' | tr '[:upper:]' '[:lower:]')"
                local wght="$(echo ${found} | awk '{print $3}' | awk -F':' '{print $2}')"
                Result="${pkey} ${wght}"
            fi
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    echo "${Result}"
}
#=================================================
# Search ADNL in Network config 36
# Input: ADNL_HEX
# Return: 
#   "PUBKEY WEIGHT" - if ADNL found in p36 list
#   "absent" - if not found
#   "null" - if p36 is empty
function P36_ADNL_search() {
    local Result="absent"
    local ADNL=`echo "$1"| tr '[:upper:]' '[:lower:]'| tr -d '"'`
    if [[ ${#ADNL} -ne 64 ]];then
        echo "${Result}"
        return
    fi
    case "${NODE_TYPE}" in
        RUST)
            local P36_List="$($CALL_TC getconfig 36)"
            if [[ -n $(echo "$P36_List" | grep "Config p36:" | grep "null") ]];then
                echo "null"
                return
            fi
            P36_list="$($CALL_TC getconfig 36 | sed -e '1,4d' |sed 's/Config p36: //')"
            local found=`echo "${P36_list}" | jq ".list[]|select(.adnl_addr == \"$ADNL\")"`
            if [[ -n $found ]]; then
                local adnl="$(echo ${found} | jq -r .adnl_addr )"
                local pkey="$(echo ${found} | jq -r .public_key )"
                local wght="$(echo ${found} | jq -r .weight )"
                Result="${pkey} ${wght}"
            fi
            ;;
        CPP)
            local P36_list="$($CALL_LC -rc "getconfig 36" -rc "quit" 2>/dev/null)"
            if [[ ! -z $(echo "$P36_list" | grep "ConfigParam(36)" | grep "null") ]];then
                echo "null"
                return
            fi
            P36_list="$($CALL_LC -rc "getconfig 36" -rc "quit" 2>/dev/null | grep -i 'public_key:'| sed -e 's/^[[:space:]]*//'|tr -d ')')"
            local found=`echo "${P36_list}" | grep -i "${ADNL}"`
            if [[ -n $found ]]; then
                local adnl="$(echo ${found} | awk '{print $4}' | awk -F':' '{print $2}' | tr -d 'x' | tr '[:upper:]' '[:lower:]')"
                local pkey="$(echo ${found} | awk '{print $2}' | awk -F':' '{print $2}' | tr -d 'x' | tr '[:upper:]' '[:lower:]')"
                local wght="$(echo ${found} | awk '{print $3}' | awk -F':' '{print $2}')"
                Result="${pkey} ${wght}"
            fi
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    echo "${Result}"
}
#=================================================
# Get depool elections ID
# Input: DePool_Addr
# Output: DePool_elections_ID
function Get_DePool_elec_ID() {
    local Depool_addr="$1"
    local Depool_Rounds_Info="$(Get_DP_Rounds $Depool_addr)"
    local Curr_Rounds_Info="$(Rounds_Sorting_by_ID "$Depool_Rounds_Info")"
    local Curr_DP_Elec_ID=$(echo   "$Curr_Rounds_Info" | jq -r ".[1].supposedElectedAt" | xargs printf "%10d\n")
    echo $Curr_DP_Elec_ID
}
#=================================================
# Get current Engine keys
# Returns: 
#   null    - if have not participated in any elections yet
#   CurrADNL Curr_ID - if only one elections in engine (CPP node before elections or first elections for Rust node)
#   CurrADNL Curr_ID Next_ADNL Next_ID - in other cases
# Current - keys for current validating round
# Next - keys for next validating round (after success bid for elections)
function Get_Engine_ADNL() {
    local Result="null"
    case "${NODE_TYPE}" in
        RUST)
            local Curr_Engine_Val_Keys=`cat ${R_CFG_DIR}/config.json | jq .validator_keys`
            [[ "$Curr_Engine_Val_Keys" == "null" ]] && echo "$Result" && return
            local ADNL_0=`echo $Curr_Engine_Val_Keys | jq -r .[0].validator_adnl_key_id`
            local Elec_0=`echo $Curr_Engine_Val_Keys | jq -r .[0].election_id`
            local ADNL_1=`echo $Curr_Engine_Val_Keys | jq -r .[1].validator_adnl_key_id`
            local Elec_1=`echo $Curr_Engine_Val_Keys | jq -r .[1].election_id`
            if [[ "$ADNL_0" == "null" ]];then
                echo "$Result"
                return
            fi
            if [[ "$ADNL_1" == "null" ]];then
                local Curr_Engine_ADNL=`echo $ADNL_0 | base64 -d|od -t xC -An|tr -d '\n'|tr -d ' '`
                local Curr_Engine_Elec_ID=$Elec_0
            else
                local Next_Engine_Elec_ID=$((Elec_0 > Elec_1 ? Elec_0 : Elec_1))
                local Curr_Engine_Elec_ID=$((Elec_0 < Elec_1 ? Elec_0 : Elec_1))
                local Curr_Engine_ADNL=`echo $Curr_Engine_Val_Keys | jq -r ".[]|select(.election_id == $Curr_Engine_Elec_ID)|.validator_adnl_key_id" \
                    | base64 -d|od -t xC -An|tr -d '\n'|tr -d ' '`
                local Next_Engine_ADNL=`echo $Curr_Engine_Val_Keys | jq -r ".[]|select(.election_id == $Next_Engine_Elec_ID)|.validator_adnl_key_id" \
                    | base64 -d|od -t xC -An|tr -d '\n'|tr -d ' '`
            fi
            ;;
        CPP)
            # this works with engine from https://github.com/FreeTON-Network/FreeTON-Node 
            local VC_OUTPUT=`$CALL_VC -c "getvalidators" -c "quit" 2>/dev/null`
            if [[ -n "$(echo "$VC_OUTPUT" | grep -i 'conn failed')" ]]; then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Can not connect the engine!!!" 
                exit 1
            fi
            # after write new keys into engine and before new round start, 
            # new keys is with tag validator0 and current with tag validator1
            local ADNL_0="$(echo "$VC_OUTPUT" | grep "validator0" | grep -i "adnl" | awk '{print $4}')"
            local Elec_0="$(echo "$VC_OUTPUT" | grep "validator0" | grep -i "adnl" | awk '{print $2}')"
            local ADNL_1="$(echo "$VC_OUTPUT" | grep "validator1" | grep -i "adnl" | awk '{print $4}')"
            local Elec_1="$(echo "$VC_OUTPUT" | grep "validator1" | grep -i "adnl" | awk '{print $2}')"
            if [[ -z $ADNL_0 ]];then
                echo "$Result"
                return
            fi
            if [[ -z ${ADNL_1} ]];then
                local Curr_Engine_ADNL=$ADNL_0
                local Curr_Engine_Elec_ID=$Elec_0
            else
                local Curr_Engine_ADNL=$ADNL_0
                local Next_Engine_ADNL=$ADNL_1
                local Curr_Engine_Elec_ID=$Elec_0
                local Next_Engine_Elec_ID=$Elec_1
                if [[ $Elec_0 -gt $Elec_1 ]];then
                    Curr_Engine_ADNL=$ADNL_1
                    Next_Engine_ADNL=$ADNL_0
                    Curr_Engine_Elec_ID=$Elec_1
                    Next_Engine_Elec_ID=$Elec_0
                 fi
            fi
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    if [[ -z $ADNL_1 ]] || [[ "$ADNL_1" == "null" ]];then
        Result="${Curr_Engine_ADNL} ${Curr_Engine_Elec_ID}"
    else
        Result="${Curr_Engine_ADNL} ${Curr_Engine_Elec_ID} ${Next_Engine_ADNL} ${Next_Engine_Elec_ID}"
    fi
    echo "$Result"
}
#=================================================
# Search ADNL in Elector during elections
# Return: 
#   "absent" - if not found
#   "null" - if elections closed
#   "stake time max_factor addr" - if found
function Elector_ADNL_Search() {
    local Result="absent"
    local ADNL=`echo "$1"| tr '[:upper:]' '[:lower:]'| tr -d '"'`
    if [[ ${#ADNL} -ne 64 ]];then
        echo "${Result}"
        return
    fi
    elector_addr="$(Get_Elector_Address)"
    case "${NODE_TYPE}" in
        RUST)
            case "${ELECTOR_TYPE}" in
                fift)
                    local Elector_Parts_List="$($CALL_TC runget ${elector_addr} participant_list_extended | grep -i 'result:' | tr "]]" "\n" | tr '[' '\n' | awk 'NF > 0'| tr '","' ' ')"
                    local Elections_Open=`echo $Elector_Parts_List | grep -F '0 0 0 0 null 0 0'`
                    if [[ -n $Elections_Open ]];then
                        echo "null"
                        return
                    fi
                    local found=`echo "${Elector_Parts_List}" | grep -i "0x${ADNL}"`
                    if [[ -z $found ]];then
                        echo "absent"
                        return
                    fi
                    local stake=`echo "${found}" | awk '{print $1}'`
                    local time=0
                    local max_factor=`echo "${found}" | awk '{print $2}'`
                    local addr=`echo "${Elector_Parts_List}" | grep -B 1 "0x${ADNL}" | head -1|cut -d 'x' -f 2`
                    Result="$stake $time $max_factor $addr"
                    ;;
                solidity)
                    local Elector_Parts_List=`$CALL_TC run ${elector_addr} get {} --abi ${Elector_ABI} | sed -e "1,/Succeeded/d" | sed 's/Result: //'`
                    local Elections_Open=`echo $Elector_Parts_List | jq .election_open`
                    if [[ $Elections_Open == false ]]; then
                        echo "null"
                        return
                    fi
                    local found=`echo "$Elector_Parts_List" | jq ".cur_elect.members[]|select(.adnl_addr == \"0x${ADNL}\")"`
                    if [[ -z $found ]];then
                        echo "absent"
                        return
                    fi
                    local stake="$(echo ${found} | jq -r .stake)"
                    local time="$(echo ${found} |  jq -r .time)"
                    local max_factor="$(echo ${found} | jq -r .max_factor)"
                    local addr="$(echo ${found} | jq -r .addr|cut -d 'x' -f 2)"
                    Result="$stake $time $max_factor $addr"
                    ;;
                *)
                    echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): unknown ELECTOR_TYPE (${ELECTOR_TYPE})"
                    exit 1
                    ;;
            esac
            ;;
        CPP)
        #### TODO: ADD solidity elector parsing ??
            case "${ELECTOR_TYPE}" in
                fift)
                    local dec_val_adnl=$(hex2dec "$ADNL")
                    trap 'echo LC TIMEOUT EXIT' EXIT
                    local LC_OUTPUT="$($CALL_LC -rc "runmethodfull $elector_addr participant_list_extended" -rc "quit" 2>/dev/null | grep -i 'result:' | tr "]]" "\n" | tr '[' '\n' | awk 'NF > 0')"
                    trap - EXIT
                    local Elections_Open=`echo "$LC_OUTPUT" | grep -F '0 0 0 0 () 0 0'`
                    if [[ -n $Elections_Open ]]; then
                        echo "null"
                        return
                    fi
                    # public key : [ stake, max_factor, wallet (addr), adnl (adnl_addr) ]
                    local found=`echo "${LC_OUTPUT}" | grep -i "$dec_val_adnl"`
                    if [[ -z $found ]];then
                        echo "absent"
                        return
                    fi
                    local stake=`echo "${LC_OUTPUT}" | grep "$dec_val_adnl" | awk '{print $1}'`
                    local time=0
                    local max_factor=`echo "${LC_OUTPUT}" | grep "$dec_val_adnl" | awk '{print $3}'`
                    local addr=`echo "${LC_OUTPUT}" | grep -B 1 "$dec_val_adnl" | head -1`
                    addr="$(dec2hex $addr)"
                    Result="$stake $time $max_factor $addr"
                    ;;
                solidity)
                    echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Non implemented for CPP node with Solidity Elector!"
                    exit 1
                    ;;
                *)
                    echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): unknown ELECTOR_TYPE (${ELECTOR_TYPE})"
                    exit 1
                    ;;
            esac
            ;;
          *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    echo "${Result}"
}
#=================================================
# Get network config 15
# Output:
#   validators_elected_for elections_start_before elections_end_before stake_held_for
#
function Get_NetConfig_P15() {
    local Result=""
    case "${NODE_TYPE}" in
        RUST)
            local CONFIG_PAR_15=`$CALL_TC getconfig 15 2>&1`
            local validators_elected_for=`echo "${CONFIG_PAR_15}" | grep -i 'validators_elected_for' | awk '{print $2}' | tr -d ','`
            local elections_start_before=`echo "${CONFIG_PAR_15}" | grep -i 'elections_start_before' | awk '{print $2}' | tr -d ','`
            local elections_end_before=`echo "${CONFIG_PAR_15}"   | grep -i 'elections_end_before'   | awk '{print $2}' | tr -d ','`
            local stake_held_for=`echo "${CONFIG_PAR_15}"         | grep -i 'stake_held_for'         | awk '{print $2}' | tr -d ','`
            if [[ -z $validators_elected_for ]] || [[ -z $elections_start_before ]] || [[ -z $elections_end_before ]] || [[ -z $stake_held_for ]];then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Get network election params (p15) FAILED!!!"
                exit 1
            fi
            ;;
        CPP)
            trap 'echo LC TIMEOUT EXIT' EXIT
            local CONFIG_PAR_15=`$CALL_LC -rc "getconfig 15" -rc "quit" 2>/dev/null | grep -i "ConfigParam(15)"`
            trap - EXIT
            local validators_elected_for=`echo $CONFIG_PAR_15 | awk '{print $4}'| awk -F ":" '{print $2}'`
            local elections_start_before=`echo $CONFIG_PAR_15 | awk '{print $5}'| awk -F ":" '{print $2}'`
            local elections_end_before=`echo $CONFIG_PAR_15   | awk '{print $6}'| awk -F ":" '{print $2}'`
            local stake_held_for=`echo $CONFIG_PAR_15         | awk '{print $7}'| awk -F ":" '{print $2}' | tr -d ')'`
            if [[ -z $validators_elected_for ]] || [[ -z $elections_start_before ]] || [[ -z $elections_end_before ]] || [[ -z $stake_held_for ]];then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Get network election params (p15) FAILED!!!"
                exit 1
            fi
            ;;
          *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    Result="$validators_elected_for $elections_start_before $elections_end_before $stake_held_for"
    echo "${Result}"
}
#=================================================
# Get DePool rounds
# Input: DePool_Addr
# Output: DePool Rounds in json format
function Get_DP_Rounds() {
    local Result=""
    local Depool_addr="$1"
    local dpc_addr=`echo $Depool_addr | cut -d ':' -f 2`
    if [[ ! -f $DePool_ABI ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot find DePool ABI. Can't continue. Sorry."
        exit 1
    fi
    case "${NODE_TYPE}" in
        RUST)
            Result="$($CALL_TC run "${Depool_addr}" getRounds {} --abi $DePool_ABI |sed -e '1,/Succeeded./d'|sed 's/Result: //')"
            ;;
        CPP)
            local LC_OUTPUT="$(Get_SC_current_state "$Depool_addr")"
            local result=`echo $LC_OUTPUT | grep "written StateInit of account"`
            if [[ -z  $result ]];then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot get DePool state!!"
                exit 1
            fi
            Result="$($CALL_TL test -a $DePool_ABI -m getRounds -p "{}" --decode-c6 $dpc_addr | grep -i 'rounds')"
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    echo "${Result}"
}
#=================================================
# Get DePool Self balance
#   Input: DePool_Addr
#   Output: DePool self balance in Tokens XXX.XXX
function Get_DP_Self_Balance() {
    local Result=""
    local Depool_addr="$1"
    local dpc_addr=`echo $Depool_addr | cut -d ':' -f 2`
    if [[ ! -f $DePool_ABI ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot find DePool ABI. Can't continue. Sorry."
        exit 1
    fi
    case "${NODE_TYPE}" in
        RUST)
            DP_balance_nT="$($CALL_TC run "${Depool_addr}" getDePoolBalance {} --abi $DePool_ABI |sed -e '1,/Succeeded./d'|sed 's/Result: //'|jq -r '.value0')"
            ;;
        CPP)
            local LC_OUTPUT="$(Get_SC_current_state "$Depool_addr")"
            local result=`echo $LC_OUTPUT | grep "written StateInit of account"`
            if [[ -z  $result ]];then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot get DePool state!!"
                exit 1
            fi
            DP_balance_nT="$($CALL_TL test -a $DePool_ABI -m getDePoolBalance -p "{}" --decode-c6 $dpc_addr | grep -i 'value0')"
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    Result="$(echo "scale=3; $((DP_balance_nT)) / 1000000000" | $CALL_BC)"
    echo "${Result}"
}
#=================================================
# Get DePool INFO
# Input: DePool_Addr
# Output: DePool Info in json format
function Get_DP_Info() {
    local Result=""
    local Depool_addr="$1"
    local dpc_addr=`echo $Depool_addr | cut -d ':' -f 2`
    if [[ ! -f $DePool_ABI ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot find DePool ABI. Can't continue. Sorry."
        exit 1
    fi
    case "${NODE_TYPE}" in
        RUST)
            Result="$($CALL_TC run "${Depool_addr}" getDePoolInfo {} --abi $DePool_ABI |sed -e '1,/Succeeded./d'|sed 's/Result: //')"
            ;;
        CPP)
            local LC_OUTPUT="$(Get_SC_current_state "$Depool_addr")"
            local result=`echo $LC_OUTPUT | grep "written StateInit of account"`
            if [[ -z  $result ]];then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot get DePool state!!"
                exit 1
            fi
            Result="$($CALL_TL test -a $DePool_ABI -m getDePoolInfo -p "{}" --decode-c6 $dpc_addr | grep -i 'validatorWallet')"
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    echo "${Result}"
}
#=================================================
# Get DePool List of Partisipants 
# Input: DePool_Addr
# Output: DePool Info in json format
function Get_DP_Parts_List() {
    local Result=""
    local Depool_addr="$1"
    local dpc_addr=`echo $Depool_addr | cut -d ':' -f 2`
    if [[ ! -f $DePool_ABI ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot find DePool ABI. Can't continue. Sorry."
        exit 1
    fi
    case "${NODE_TYPE}" in
        RUST)
            Result="$($CALL_TC run "${Depool_addr}" getParticipants {} --abi $DePool_ABI |sed -e '1,/Succeeded./d'|sed 's/Result: //')"
            ;;
        CPP)
            local LC_OUTPUT="$(Get_SC_current_state "$Depool_addr")"
            local result=`echo $LC_OUTPUT | grep "written StateInit of account"`
            if [[ -z  $result ]];then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot get DePool state!!"
                exit 1
            fi
            Result="$($CALL_TL test -a $DePool_ABI -m getParticipants -p "{}" --decode-c6 $dpc_addr | grep 'participants')"
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    echo "${Result}"
}
#=================================================
# Get DePool Partisipant Info
# Input: DePool_Addr Part_Addr
# Output: DePool Partisipant Info in json format
function Get_DP_Part_Info() {
    local Result=""
    local Depool_addr="$1"
    local dpc_addr=`echo $Depool_addr | cut -d ':' -f 2`
    local Part_addr="$2"
    if [[ ! -f $DePool_ABI ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot find DePool ABI. Can't continue. Sorry."
        exit 1
    fi
    case "${NODE_TYPE}" in
        RUST)
            Result="$($CALL_TC run "${Depool_addr}" getParticipantInfo "{\"addr\":\"${Part_addr}\"}" --abi $DePool_ABI |sed -e '1,/Succeeded./d'|sed 's/Result: //')"
            ;;
        CPP)
            local LC_OUTPUT="$(Get_SC_current_state "$Depool_addr")"
            local result=`echo $LC_OUTPUT | grep "written StateInit of account"`
            if [[ -z  $result ]];then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot get DePool state!!"
                exit 1
            fi
            Result="$($CALL_TL test -a $DePool_ABI -m getParticipantInfo -p "{\"addr\":\"$Part_addr\"}" --decode-c6 $dpc_addr|grep -i 'withdrawValue')"
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    echo "${Result}"
}
#=================================================
# echo "$(Rounds_Sorting_by_ID "$Curr_Rounds_Info")"
# Input 
#   "rounds_in_json"
# Output
#   "sorted_rounds_in_json"
function Rounds_Sorting_by_ID() {
    local Rounds_json=$1
    local ID0=`echo "$Rounds_json" | jq -r "[.rounds[]]|.[0].id"`
    local ID1=`echo "$Rounds_json" | jq -r "[.rounds[]]|.[1].id"`
    local ID2=`echo "$Rounds_json" | jq -r "[.rounds[]]|.[2].id"`
    local ID3=`echo "$Rounds_json" | jq -r "[.rounds[]]|.[3].id"`
    declare -a rounds=($(($ID0)) $(($ID1)) $(($ID2)) $(($ID3)))
    IFS=$'\n' Rounds_Sorted=($(sort -g <<<"${rounds[*]}")); unset IFS
    local RS_0="$(echo "$Rounds_json" | jq -r "[.rounds[]]|.[]|select(.id == \"${Rounds_Sorted[0]}\")")"
    local RS_1="$(echo "$Rounds_json" | jq -r "[.rounds[]]|.[]|select(.id == \"${Rounds_Sorted[1]}\")")"
    local RS_2="$(echo "$Rounds_json" | jq -r "[.rounds[]]|.[]|select(.id == \"${Rounds_Sorted[2]}\")")"
    local RS_3="$(echo "$Rounds_json" | jq -r "[.rounds[]]|.[]|select(.id == \"${Rounds_Sorted[3]}\")")"
    echo "[${RS_0},${RS_1},${RS_2},${RS_3}]"
}
#=================================================
# Get MSIG transactions List
# Input: msig address
# Output: transactions in json
function Get_MSIG_Trans_List() {
    local Result="{}"
    local MSIG_ADDR="$1"
    local pure_addr=`echo "${MSIG_ADDR}" | cut -d ':' -f 2`
    if [[ ! -f $SafeC_Wallet_ABI ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot find SafeCodeWallet ABI. Can't continue. Sorry."
        exit 1
    fi
    case "${NODE_TYPE}" in
        RUST)
            local TC_OUTPUT="$($CALL_TC run ${MSIG_ADDR} getTransactions {} --abi $SafeC_Wallet_ABI)"
            Result="$(echo "$TC_OUTPUT" | sed -e "1,/Succeeded/d" | sed 's/Result: //')"
            ;;
        CPP)
            local LC_OUTPUT="$(Get_SC_current_state "$MSIG_ADDR")"
            local result=`echo $LC_OUTPUT | grep "written StateInit of account"`
            if [[ -z  $result ]];then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot get account state!! Account: $MSIG_ADDR"
                exit 1
            fi
            Result="$($CALL_TL test -a $SafeC_Wallet_ABI -m getTransactions -p "{}" --decode-c6 $pure_addr|grep -i '"transactions":')"
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    echo "${Result}"
}
#=================================================
# Sign MSIG transaction
# !!! I don't check result here !!! Just send one confirmation.
# Input: Trans_ID msig_address key_file
# Output: 
function Send_MSIG_Trans_Confirm() {
    local Result="failed"
    local Trans_ID="$1"
    local MSIG_ADDR="$2"
    local Keys_File="$3"
    local pure_addr=`echo "${MSIG_ADDR}" | cut -d ':' -f 2`
    local wc=`echo "${MSIG_ADDR}" | cut -d ':' -f 1`
    local msig_public=`cat "$Keys_File" | jq -r '.public'`
    local msig_secret=`cat "$Keys_File" | jq -r '.secret'`
    if [[ -z $msig_public ]] || [[ -z $msig_secret ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Can't find public and/or secret key in $Keys_File!"
        exit 1
    fi
    if [[ ! -f $SafeC_Wallet_ABI ]] || [[ ! -f $Keys_File ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Cannot find SafeCodeWallet ABI or Keys file. Can't continue. Sorry."
        exit 1
    fi
    case "${NODE_TYPE}" in
        RUST)
            if $CALL_TC call ${MSIG_ADDR} confirmTransaction "{\"transactionId\":\"${Trans_ID}\"}" --abi $SafeC_Wallet_ABI --sign $Keys_File 1>&2 ; then
               Result="success"
            fi
            ;;
        CPP)
            # prepare user signatures
            echo "${msig_secret}${msig_public}" > tmp.keys.txt
            rm -f tmp.keys.bin
            xxd -r -p tmp.keys.txt tmp.keys.bin
            local TVM_OUTPUT=$($CALL_TL message $pure_addr -a ${SafeC_Wallet_ABI} -m confirmTransaction -p "{\"transactionId\":$Trans_ID}" -w $wc --setkey tmp.keys.bin)
            if [[ -z $(echo "$TVM_OUTPUT" | grep "boc file created") ]];then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): TVM linker CANNOT create boc file for signature ${i}!!! Can't continue. Exit."
                exit 1
            fi
            mv -f "$(echo "$pure_addr"| cut -c 1-8)-msg-body.boc" "confirm-msg.boc"
            trap 'echo LC TIMEOUT EXIT' EXIT
            local LC_OUT="$($CALL_LC -rc "sendfile confirm-msg.boc" -rc 'quit' 2>&1 | grep 'external message status is 1')"
            trap - EXIT
            if [[ -z "$LC_OUT" ]]; then
                echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Send message for confirmation ${i} FAILED!!!"
                exit 1
            fi
            rm -f tmp.keys.bin tmp.keys.txt confirm-msg.boc
            Result="success"
            sleep $LC_Send_MSG_Timeout
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    echo "${Result}"
}
#=================================================
# Send File - send external message serialized as bag of cells and stored in specified msg_file
# Input: boc file
# Output: result
function Send_File_To_BC() {
    local Result="failed"
    local BOC_File="$1"
    [[ ! -f $BOC_File ]] && echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): File to send not found!!!"
    case "${NODE_TYPE}" in
        RUST)
            if $CALL_TC sendfile $BOC_File &>/dev/null ; then
               Result="success"
            fi
            sleep $LC_Send_MSG_Timeout
            ;;
        CPP)
            local LC_OUT="$($CALL_LC -rc "sendfile $BOC_File" -rc 'quit' 2>&1 | grep 'external message status is 1')"
            [[ -n "$(echo "$LC_OUT" | grep -i 'external message status is 1')" ]] && Result="success"
            sleep $LC_Send_MSG_Timeout
            ;;
        *)
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Unknown NODE TYPE!!!"
            exit 1
            ;;            
    esac
    echo "${Result}"
}
#=================================================
# This function generate new keys for C++ node engine
#   write its to engine and generate BOC with keys & times
#   BOC file will be write to validator-query.boc file
#   only masterchain smartcontracts may participate in validator elections
# Input: 
#   Masterchain_Address Validating_Start Validating_Stop
# Output: 
#   PubKey ADNL_Key 
#   or emty if unseccess 
function CNode_Make_Elect_Keys_and_BOC() {
    local Result=""
    local MC_Wall_Addr=$1
    local Validating_Start=$2
    local Validating_Stop=$3
    if [[ "$NODE_TYPE" != "CPP" ]];then
        echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Wrong NODE TYPE $NODE_TYPE !!!"
        return
    fi
    local elections_id=$(Get_Current_Elections_ID)
    elections_id=$((elections_id))
    #=================================================
    # Generate node new pubkey for next elections
    local NewElectionKey=`cat ${ELECTIONS_WORK_DIR}/${elections_id}.log | grep "Elections key:" | awk '{print $3}'` 
    if [[ -z $NewElectionKey ]];then
        NewElectionKey=`$CALL_VC -c "newkey" -c "quit" 2>/dev/null | grep "created new key" | awk '{print $4}'`
        if [[ -z $NewElectionKey ]];then
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Generate new election pub key FAILED!!!"
            exit 1
        fi
        echo "Elections key: $NewElectionKey" >> ${ELECTIONS_WORK_DIR}/${elections_id}.log
    fi
    #=================================================
    # Generate node new ADNL for next elections
    local New_ADNL_Key=`cat ${ELECTIONS_WORK_DIR}/${elections_id}.log | grep "ADNL key:" | awk '{print $3}'` 
    if [[ -z $New_ADNL_Key ]];then
        New_ADNL_Key=`$CALL_VC -c "newkey" -c "quit" 2>/dev/null | grep "created new key" | awk '{print $4}'`
        if [[ -z $New_ADNL_Key ]];then
            echoerr "###-ERROR(${FUNCNAME[0]} line $LINENO): Generate new ADNL key FAILED!!!"
            exit 1
        fi
        echo "ADNL key: $New_ADNL_Key" >> ${ELECTIONS_WORK_DIR}/${elections_id}.log
    fi
    #=================================================
    # Creates a request to participate in validator elections starting at <Validating_Start> on behalf of smart-contract with address <MC_Wall_Addr>
    local Val_Elect_Request=$($CALL_FIFT -s validator-elect-req.fif ${MC_Wall_Addr} ${Validating_Start} ${MAX_FACTOR} ${New_ADNL_Key} ${ELECTIONS_WORK_DIR}/Val_Elect_Request.bin \
            | tee "${ELECTIONS_WORK_DIR}/${elections_id}-request.log" \
            | sed -n 2p)
    if [[ -z $Val_Elect_Request ]];then
        echoerr "###-ERROR(line $LINENO): validator-elect-req.fif NOT processed !!! Can't continue."
        exit 1
    fi
    #=================================================
    # Signing New Public_Key
    local Sign_Result=$($CALL_VC -c "exportpub $NewElectionKey" -c "sign $NewElectionKey $Val_Elect_Request" -c "quit" \
        | tee  "${ELECTIONS_WORK_DIR}/${elections_id}-sign-pubkey.log")
    Public_Key=`echo "${Sign_Result}" | grep "got public key" | awk '{print $4}'`
    Signature=`echo "${Sign_Result}" | grep "got signature" | awk '{print $3}'`
    if [[ -z $Public_Key ]] || [[ -z $Signature ]];then
        echoerr "###-ERROR(line $LINENO): Signing  NewElectionKey FAILED!!! Can't continue."
        exit 1
    fi
    #=================================================
    # Create validator-query.boc
    local Cr_BOC_Result=$($CALL_FIFT -s validator-elect-signed.fif ${MC_Wall_Addr} ${Validating_Start} ${MAX_FACTOR} ${New_ADNL_Key} ${Public_Key} ${Signature} validator-query.boc \
        | tee "${ELECTIONS_WORK_DIR}/${elections_id}-create-boc.log" )
    if [[ -z $(echo "$Cr_BOC_Result" | grep "Message body is" | awk '{print $4}') ]];then
        echoerr "###-ERROR(line $LINENO): validator-query.boc NOT created!!! Can't continue"
        exit 1
    fi
    #=================================================
    # Add new keys to engine
    local Add_New_Keys_Result=`$CALL_VC \
        -c "addpermkey $NewElectionKey $Validating_Start $Validating_Stop" \
        -c "addtempkey $NewElectionKey $NewElectionKey $Validating_Stop" \
        -c "addadnl $New_ADNL_Key 0" \
        -c "addvalidatoraddr $NewElectionKey $New_ADNL_Key $Validating_Stop" \
        -c "quit"`
    if [[ -n $(echo "$Add_New_Keys_Result" | grep "duplicate election date") ]];then
        echoerr "###-WARNING(${FUNCNAME[0]} line $LINENO): New keys was added to engine already! Problems possible !!! Got: $Add_New_Keys_Result"
    fi
    echo "$NewElectionKey $New_ADNL_Key"
}
